# Ruby CircleCI 2.0 configuration file
#
# Check https://circleci.com/docs/2.0/language-ruby/ for more details
#
version: 2
jobs:
    sanity-check:
        docker:
            - image: &RUBY_IMAGE circleci/ruby:2.4

        steps:
            - run:
                name: environment
                command: |-
                    set -u

                    function fail() {
                        echo "$*"
                        exit 1
                    }

                    test -n "${AWS_ACCESS_KEY_ID:-}"     || fail "AWS_ACCESS_KEY_ID not set"
                    test -n "${AWS_SECRET_ACCESS_KEY:-}" || fail "AWS_SECRET_ACCESS_KEY not set"
                    test -n "${STATE_BUCKET:-}"          || fail "STATE_BUCKET not set"
                    test -n "${STATE_BUCKET_REGION:-}"   || fail "STATE_BUCKET_REGION not set"

    build-site:
        docker:
            - image: *RUBY_IMAGE

        working_directory: ~/project/jekyll

        steps:
            - checkout:
                path: ~/project

            - restore_cache:
                keys:
                    - &CACHE_KEY v2-dependencies-{{ checksum "Gemfile.lock" }}

            - run:
                name: install dependencies
                command: |-
                    bundle install --jobs=4 --retry=3 --path /tmp/vendor/bundle

            - save_cache:
                key: *CACHE_KEY
                paths:
                    - /tmp/vendor/bundle

            - run:
                name: jekyll build
                command: |-
                    bundle exec jekyll build

            - persist_to_workspace:
                root: "."
                paths: _site/*

    package-thumbor:
        docker:
            - image: circleci/python:2.7

        steps:
            - checkout

            ## only build when the thumbor build script or config file has changed
            - restore_cache:
                keys:
                    - &THUMBOR_CACHE_KEY v1-dependencies-{{ checksum "thumbor/build.sh" }}-{{ checksum "thumbor/thumbor.conf" }}

            - run:
                name: package thumbor function
                command: test -e thumbor/dist/image-handler.zip || thumbor/build.sh

            - save_cache:
                key: *THUMBOR_CACHE_KEY
                paths:
                    - thumbor/dist

            - persist_to_workspace:
                root: "."
                paths: thumbor/dist/image-handler.zip

    terraform:
        docker:
            - image: hashicorp/terraform:0.11.7

        working_directory: ~/project/terraform

        steps:
            - checkout:
                path: ~/project

            ## populate ~/project/thumbor/dist
            - attach_workspace:
                at: ~/project

            - run: terraform init -input=false -backend-config=bucket=${STATE_BUCKET} -backend-config=region=${STATE_BUCKET_REGION}
            - run: terraform plan -input=false -out=plan
            - run: terraform apply plan
            - run: terraform output -json > terraform.json

            - persist_to_workspace:
                root: "."
                paths: terraform.json

    deploy-site:
        docker:
            - image: circleci/python:3

        steps:
            - attach_workspace:
                at: "."

            - run:
                name: install dependencies
                command: pip install awscli --upgrade --user

            - run:
                name: sync site
                command: |-
                    target="$( jq -r '"s3://" + .bucket.value + "/" + .jekyll_site_prefix.value' terraform.json )"

                    ~/.local/bin/aws s3 sync --quiet --delete _site/ "${target}"

workflows:
    version: 2
    build-and-deploy:
        jobs:
            - sanity-check
            - package-thumbor

            - build-site:
                requires:
                    - sanity-check

            - terraform:
                requires:
                    - sanity-check
                    - package-thumbor

            - deploy-site:
                requires:
                    - build-site
                    - terraform
